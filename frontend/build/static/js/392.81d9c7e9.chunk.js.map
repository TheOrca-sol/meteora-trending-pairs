{"version":3,"file":"static/js/392.81d9c7e9.chunk.js","mappings":"0MAEA,MAAMA,EAAe,4BAERC,EAAyB,CAQpC,oBAAMC,CAAeC,GAA8E,IAA/DC,EAASC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAAIG,EAAgBH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAEI,KAAK,EAAMC,MAAM,GACxF,IACE,MAAMC,QAAiBC,EAAAA,EAAMC,KAAK,GAADC,OAAId,EAAY,qBAAqB,CACpEG,gBACAC,YACAI,qBAGF,MAAO,CACLO,SAAS,EACTC,UAAWL,EAASM,KAAKD,WAAa,GACtCE,QAASP,EAASM,KAAKC,QAE3B,CAAE,MAAOC,GAAQ,IAADC,EAAAC,EAEd,OADAC,QAAQH,MAAM,4BAA6BA,GACpC,CACLJ,SAAS,EACTC,UAAW,GACXG,OAAqB,QAAdC,EAAAD,EAAMR,gBAAQ,IAAAS,GAAM,QAANC,EAAdD,EAAgBH,YAAI,IAAAI,OAAN,EAAdA,EAAsBH,UAAWC,EAAMD,QAElD,CACF,EAWA,0BAAMK,CAAqBpB,EAAeC,EAAWI,GAA8D,IAA5CgB,EAAgBnB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAAIoB,EAAYpB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IAC3G,IACE,MAAMM,QAAiBC,EAAAA,EAAMC,KAAK,GAADC,OAAId,EAAY,0BAA0B,CACzEG,gBACAC,YACAI,mBACAgB,mBACAC,iBAGF,MAAO,CACLV,SAAS,EACTW,cAAef,EAASM,KAAKS,eAAiB,GAC9CC,WAAYhB,EAASM,KAAKW,aAAe,EACzCV,QAASP,EAASM,KAAKC,QAE3B,CAAE,MAAOC,GAAQ,IAADU,EAAAC,EAEd,OADAR,QAAQH,MAAM,iCAAkCA,GACzC,CACLJ,SAAS,EACTW,cAAe,GACfC,WAAY,EACZR,OAAqB,QAAdU,EAAAV,EAAMR,gBAAQ,IAAAkB,GAAM,QAANC,EAAdD,EAAgBZ,YAAI,IAAAa,OAAN,EAAdA,EAAsBZ,UAAWC,EAAMD,QAElD,CACF,GAGF,G","sources":["services/capitalRotationService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:5000/api';\n\nexport const capitalRotationService = {\n  /**\n   * Fetch wallet positions from backend\n   * @param {string} walletAddress - Solana wallet address\n   * @param {Array} whitelist - Array of token mint addresses\n   * @param {Object} quotePreferences - Quote token preferences {sol: boolean, usdc: boolean}\n   * @returns {Promise} - Array of positions\n   */\n  async fetchPositions(walletAddress, whitelist = [], quotePreferences = { sol: true, usdc: true }) {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/wallet/positions`, {\n        walletAddress,\n        whitelist,\n        quotePreferences\n      });\n\n      return {\n        success: true,\n        positions: response.data.positions || [],\n        message: response.data.message\n      };\n    } catch (error) {\n      console.error('Error fetching positions:', error);\n      return {\n        success: false,\n        positions: [],\n        error: error.response?.data?.message || error.message\n      };\n    }\n  },\n\n  /**\n   * Analyze and find better pool opportunities\n   * @param {string} walletAddress - Solana wallet address\n   * @param {Array} whitelist - Array of token mint addresses\n   * @param {Object} quotePreferences - Quote token preferences {sol: boolean, usdc: boolean}\n   * @param {Array} currentPositions - Current user positions\n   * @param {number} minFees30min - Minimum 30-minute fees in USD (default: 100)\n   * @returns {Promise} - Array of opportunities\n   */\n  async analyzeOpportunities(walletAddress, whitelist, quotePreferences, currentPositions = [], minFees30min = 100) {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/opportunities/analyze`, {\n        walletAddress,\n        whitelist,\n        quotePreferences,\n        currentPositions,\n        minFees30min\n      });\n\n      return {\n        success: true,\n        opportunities: response.data.opportunities || [],\n        totalFound: response.data.total_found || 0,\n        message: response.data.message\n      };\n    } catch (error) {\n      console.error('Error analyzing opportunities:', error);\n      return {\n        success: false,\n        opportunities: [],\n        totalFound: 0,\n        error: error.response?.data?.message || error.message\n      };\n    }\n  }\n};\n\nexport default capitalRotationService;\n"],"names":["API_BASE_URL","capitalRotationService","fetchPositions","walletAddress","whitelist","arguments","length","undefined","quotePreferences","sol","usdc","response","axios","post","concat","success","positions","data","message","error","_error$response","_error$response$data","console","analyzeOpportunities","currentPositions","minFees30min","opportunities","totalFound","total_found","_error$response2","_error$response2$data"],"sourceRoot":""}